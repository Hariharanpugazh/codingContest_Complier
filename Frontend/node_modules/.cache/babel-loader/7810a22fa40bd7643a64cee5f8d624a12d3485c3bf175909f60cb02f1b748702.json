{"ast":null,"code":"var _jsxFileName = \"/home/naresh/playGround/Ihub/Coding_contest/codingContest_Complier/Frontend/src/pages/ManualSelectUI.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { TextField, MenuItem, Button, Grid, Box, Typography, IconButton, Select, Checkbox, ListItemText, InputLabel, FormControl } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst roles = [\"Junior Developer\", \"Senior Developer\", \"AI Developer\"];\nconst ManualSelectUI = ({\n  problemData,\n  onSave\n}) => {\n  _s();\n  const [testCases, setTestCases] = useState([]);\n  const [hiddenTestCases, setHiddenTestCases] = useState([]);\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [problem, setProblem] = useState({\n    id: '',\n    title: '',\n    description: '',\n    level: ''\n  });\n\n  // Load problem data on mount\n  useEffect(() => {\n    if (problemData) {\n      setProblem({\n        id: problemData.id || '',\n        title: problemData.title || '',\n        description: problemData.problem_statement || '',\n        level: problemData.level || ''\n      });\n      setSelectedRoles(problemData.role || []);\n      setTestCases(problemData.samples || [{\n        inputs: [''],\n        output: ''\n      }]);\n      setHiddenTestCases(problemData.hidden_samples || [{\n        inputs: [''],\n        output: ''\n      }]);\n    }\n  }, [problemData]);\n  const handleRoleChange = event => {\n    setSelectedRoles(event.target.value);\n  };\n  const handleProblemDataChange = (field, value) => {\n    setProblem(prevData => ({\n      ...prevData,\n      [field]: value\n    }));\n  };\n  const handleAddTestCase = (isHidden = false) => {\n    const cases = isHidden ? hiddenTestCases : testCases;\n    const newCases = [...cases, {\n      inputs: [''],\n      output: ''\n    }];\n    isHidden ? setHiddenTestCases(newCases) : setTestCases(newCases);\n  };\n  const handleAddInputField = (testCaseIndex, isHidden = false) => {\n    const cases = isHidden ? hiddenTestCases : testCases;\n    const updatedCases = [...cases];\n    updatedCases[testCaseIndex].inputs.push('');\n    isHidden ? setHiddenTestCases(updatedCases) : setTestCases(updatedCases);\n  };\n  const handleRemoveInputField = (testCaseIndex, inputIndex, isHidden = false) => {\n    const cases = isHidden ? hiddenTestCases : testCases;\n    const updatedCases = [...cases];\n    updatedCases[testCaseIndex].inputs = updatedCases[testCaseIndex].inputs.filter((_, idx) => idx !== inputIndex);\n    isHidden ? setHiddenTestCases(updatedCases) : setTestCases(updatedCases);\n  };\n  const saveProblemAsJson = async () => {\n    const problemJson = {\n      id: parseInt(problem.id, 10),\n      title: problem.title,\n      role: selectedRoles,\n      level: problem.level.toLowerCase(),\n      problem_statement: problem.description,\n      samples: testCases.map(testCase => ({\n        input: testCase.inputs.map(input => `${input}`),\n        output: `${testCase.output}`\n      })),\n      hidden_samples: hiddenTestCases.map(hiddenTestCase => ({\n        input: hiddenTestCase.inputs.map(input => `${input}`),\n        output: `${hiddenTestCase.output}`\n      }))\n    };\n    try {\n      await axios.put('http://localhost:8000/updateQuestionById/', problemJson);\n      toast.success(\"Problem updated successfully!\");\n      onSave(); // Clear the selected problem and navigate back\n    } catch (error) {\n      toast.error(\"Failed to save problem data.\");\n      console.error(\"Error saving problem:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 3,\n    bgcolor: \"#f9f9f9\",\n    borderRadius: 2,\n    boxShadow: 3,\n    maxWidth: \"90%\",\n    mx: \"auto\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Edit Problem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"ID\",\n          type: \"number\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: problem.id,\n          onChange: e => handleProblemDataChange('id', e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Title\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: problem.title,\n          onChange: e => handleProblemDataChange('title', e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Description\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          multiline: true,\n          rows: 3,\n          value: problem.description,\n          onChange: e => handleProblemDataChange('description', e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          variant: \"outlined\",\n          margin: \"normal\",\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Roles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            value: selectedRoles,\n            onChange: handleRoleChange,\n            label: \"Roles\",\n            renderValue: selected => selected.join(', '),\n            children: roles.map(role => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: role,\n              children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: selectedRoles.indexOf(role) > -1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: role\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)]\n            }, role, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          select: true,\n          label: \"Difficulty\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          value: problem.level,\n          onChange: e => handleProblemDataChange('level', e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Easy\",\n            children: \"Easy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Medium\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Hard\",\n            children: \"Hard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Test Cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), testCases.map((testCase, testCaseIndex) => /*#__PURE__*/_jsxDEV(Box, {\n          mb: 2,\n          p: 2,\n          border: \"1px solid #ddd\",\n          borderRadius: 1,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: [\"Test Case \", testCaseIndex + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), testCase.inputs.map((input, inputIndex) => /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: `Input ${inputIndex + 1}`,\n              variant: \"outlined\",\n              margin: \"normal\",\n              value: input,\n              onChange: e => {\n                const updatedCases = [...testCases];\n                updatedCases[testCaseIndex].inputs[inputIndex] = e.target.value;\n                setTestCases(updatedCases);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this), inputIndex === testCase.inputs.length - 1 && /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => handleAddInputField(testCaseIndex),\n              color: \"success\",\n              sx: {\n                ml: 1\n              },\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 21\n            }, this), inputIndex > 0 && /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => handleRemoveInputField(testCaseIndex, inputIndex),\n              color: \"error\",\n              sx: {\n                ml: 1\n              },\n              children: /*#__PURE__*/_jsxDEV(RemoveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 21\n            }, this)]\n          }, inputIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Output\",\n            variant: \"outlined\",\n            margin: \"normal\",\n            value: testCase.output,\n            onChange: e => {\n              const updatedCases = [...testCases];\n              updatedCases[testCaseIndex].output = e.target.value;\n              setTestCases(updatedCases);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)]\n        }, testCaseIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleAddTestCase(false),\n          variant: \"contained\",\n          color: \"success\",\n          sx: {\n            mt: 1,\n            px: 2,\n            ':hover': {\n              backgroundColor: '#66bb6a'\n            },\n            fontSize: '0.8rem'\n          },\n          children: \"Add Test Case\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      mt: 4,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: saveProblemAsJson,\n        color: \"primary\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(ManualSelectUI, \"QNGbnYr5W0unybwczfwWE6PAsCo=\");\n_c = ManualSelectUI;\nexport default ManualSelectUI;\nvar _c;\n$RefreshReg$(_c, \"ManualSelectUI\");","map":{"version":3,"names":["React","useEffect","useState","TextField","MenuItem","Button","Grid","Box","Typography","IconButton","Select","Checkbox","ListItemText","InputLabel","FormControl","AddIcon","RemoveIcon","ToastContainer","toast","axios","jsxDEV","_jsxDEV","roles","ManualSelectUI","problemData","onSave","_s","testCases","setTestCases","hiddenTestCases","setHiddenTestCases","selectedRoles","setSelectedRoles","problem","setProblem","id","title","description","level","problem_statement","role","samples","inputs","output","hidden_samples","handleRoleChange","event","target","value","handleProblemDataChange","field","prevData","handleAddTestCase","isHidden","cases","newCases","handleAddInputField","testCaseIndex","updatedCases","push","handleRemoveInputField","inputIndex","filter","_","idx","saveProblemAsJson","problemJson","parseInt","toLowerCase","map","testCase","input","hiddenTestCase","put","success","error","console","p","bgcolor","borderRadius","boxShadow","maxWidth","mx","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","md","fullWidth","label","type","margin","onChange","e","multiline","rows","multiple","renderValue","selected","join","checked","indexOf","primary","select","mb","border","display","alignItems","length","onClick","color","sx","ml","mt","px","backgroundColor","fontSize","justifyContent","_c","$RefreshReg$"],"sources":["/home/naresh/playGround/Ihub/Coding_contest/codingContest_Complier/Frontend/src/pages/ManualSelectUI.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TextField, MenuItem, Button, Grid, Box, Typography, IconButton, Select, Checkbox, ListItemText, InputLabel, FormControl } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\n\nconst roles = [\"Junior Developer\", \"Senior Developer\", \"AI Developer\"];\n\nconst ManualSelectUI = ({ problemData, onSave }) => {\n  const [testCases, setTestCases] = useState([]);\n  const [hiddenTestCases, setHiddenTestCases] = useState([]);\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [problem, setProblem] = useState({\n    id: '',\n    title: '',\n    description: '',\n    level: '',\n  });\n\n  // Load problem data on mount\n  useEffect(() => {\n    if (problemData) {\n      setProblem({\n        id: problemData.id || '',\n        title: problemData.title || '',\n        description: problemData.problem_statement || '',\n        level: problemData.level || '',\n      });\n      setSelectedRoles(problemData.role || []);\n      setTestCases(problemData.samples || [{ inputs: [''], output: '' }]);\n      setHiddenTestCases(problemData.hidden_samples || [{ inputs: [''], output: '' }]);\n    }\n  }, [problemData]);\n\n  const handleRoleChange = (event) => {\n    setSelectedRoles(event.target.value);\n  };\n\n  const handleProblemDataChange = (field, value) => {\n    setProblem((prevData) => ({ ...prevData, [field]: value }));\n  };\n\n  const handleAddTestCase = (isHidden = false) => {\n    const cases = isHidden ? hiddenTestCases : testCases;\n    const newCases = [...cases, { inputs: [''], output: '' }];\n    isHidden ? setHiddenTestCases(newCases) : setTestCases(newCases);\n  };\n\n  const handleAddInputField = (testCaseIndex, isHidden = false) => {\n    const cases = isHidden ? hiddenTestCases : testCases;\n    const updatedCases = [...cases];\n    updatedCases[testCaseIndex].inputs.push('');\n    isHidden ? setHiddenTestCases(updatedCases) : setTestCases(updatedCases);\n  };\n\n  const handleRemoveInputField = (testCaseIndex, inputIndex, isHidden = false) => {\n    const cases = isHidden ? hiddenTestCases : testCases;\n    const updatedCases = [...cases];\n    updatedCases[testCaseIndex].inputs = updatedCases[testCaseIndex].inputs.filter((_, idx) => idx !== inputIndex);\n    isHidden ? setHiddenTestCases(updatedCases) : setTestCases(updatedCases);\n  };\n\n  const saveProblemAsJson = async () => {\n    const problemJson = {\n      id: parseInt(problem.id, 10),\n      title: problem.title,\n      role: selectedRoles,\n      level: problem.level.toLowerCase(),\n      problem_statement: problem.description,\n      samples: testCases.map((testCase) => ({\n        input: testCase.inputs.map(input => `${input}`),\n        output: `${testCase.output}`\n      })),\n      hidden_samples: hiddenTestCases.map((hiddenTestCase) => ({\n        input: hiddenTestCase.inputs.map(input => `${input}`),\n        output: `${hiddenTestCase.output}`\n      }))\n    };\n\n    try {\n      await axios.put('http://localhost:8000/updateQuestionById/', problemJson);\n      toast.success(\"Problem updated successfully!\");\n      onSave(); // Clear the selected problem and navigate back\n    } catch (error) {\n      toast.error(\"Failed to save problem data.\");\n      console.error(\"Error saving problem:\", error);\n    }\n  };\n\n  return (\n    <Box p={3} bgcolor=\"#f9f9f9\" borderRadius={2} boxShadow={3} maxWidth=\"90%\" mx=\"auto\">\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Edit Problem\n      </Typography>\n      <Grid container spacing={4}>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"ID\"\n            type=\"number\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            value={problem.id}\n            onChange={(e) => handleProblemDataChange('id', e.target.value)}\n          />\n          <TextField\n            fullWidth\n            label=\"Title\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            value={problem.title}\n            onChange={(e) => handleProblemDataChange('title', e.target.value)}\n          />\n          <TextField\n            fullWidth\n            label=\"Description\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            multiline\n            rows={3}\n            value={problem.description}\n            onChange={(e) => handleProblemDataChange('description', e.target.value)}\n          />\n          <FormControl fullWidth variant=\"outlined\" margin=\"normal\">\n            <InputLabel>Roles</InputLabel>\n            <Select\n              multiple\n              value={selectedRoles}\n              onChange={handleRoleChange}\n              label=\"Roles\"\n              renderValue={(selected) => selected.join(', ')}\n            >\n              {roles.map((role) => (\n                <MenuItem key={role} value={role}>\n                  <Checkbox checked={selectedRoles.indexOf(role) > -1} />\n                  <ListItemText primary={role} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <TextField\n            fullWidth\n            select\n            label=\"Difficulty\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            value={problem.level}\n            onChange={(e) => handleProblemDataChange('level', e.target.value)}\n          >\n            <MenuItem value=\"Easy\">Easy</MenuItem>\n            <MenuItem value=\"Medium\">Medium</MenuItem>\n            <MenuItem value=\"Hard\">Hard</MenuItem>\n          </TextField>\n        </Grid>\n\n        {/* Test Cases Section */}\n        <Grid item xs={12} md={6}>\n          <Typography variant=\"h6\">Test Cases</Typography>\n          {testCases.map((testCase, testCaseIndex) => (\n            <Box key={testCaseIndex} mb={2} p={2} border=\"1px solid #ddd\" borderRadius={1}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Test Case {testCaseIndex + 1}\n              </Typography>\n              {testCase.inputs.map((input, inputIndex) => (\n                <Box display=\"flex\" alignItems=\"center\" key={inputIndex}>\n                  <TextField\n                    fullWidth\n                    label={`Input ${inputIndex + 1}`}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    value={input}\n                    onChange={(e) => {\n                      const updatedCases = [...testCases];\n                      updatedCases[testCaseIndex].inputs[inputIndex] = e.target.value;\n                      setTestCases(updatedCases);\n                    }}\n                  />\n                  {inputIndex === testCase.inputs.length - 1 && (\n                    <IconButton\n                      onClick={() => handleAddInputField(testCaseIndex)}\n                      color=\"success\"\n                      sx={{ ml: 1 }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  )}\n                  {inputIndex > 0 && (\n                    <IconButton\n                      onClick={() => handleRemoveInputField(testCaseIndex, inputIndex)}\n                      color=\"error\"\n                      sx={{ ml: 1 }}\n                    >\n                      <RemoveIcon />\n                    </IconButton>\n                  )}\n                </Box>\n              ))}\n              <TextField\n                fullWidth\n                label=\"Output\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                value={testCase.output}\n                onChange={(e) => {\n                  const updatedCases = [...testCases];\n                  updatedCases[testCaseIndex].output = e.target.value;\n                  setTestCases(updatedCases);\n                }}\n              />\n            </Box>\n          ))}\n          <Button\n            onClick={() => handleAddTestCase(false)}\n            variant=\"contained\"\n            color=\"success\"\n            sx={{\n              mt: 1,\n              px: 2,\n              ':hover': { backgroundColor: '#66bb6a' },\n              fontSize: '0.8rem',\n            }}\n          >\n            Add Test Case\n          </Button>\n        </Grid>\n      </Grid>\n\n      {/* Save Button */}\n      <Box display=\"flex\" justifyContent=\"flex-end\" mt={4}>\n        <Button variant=\"contained\" onClick={saveProblemAsJson} color=\"primary\">\n          Save\n        </Button>\n      </Box>\n\n      <ToastContainer />\n    </Box>\n  );\n};\n\nexport default ManualSelectUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}